// 41. First Missing Positive
 // Given an unsorted integer array nums, return the smallest missing positive integer.
// You must implement an algorithm that runs in O(n) time and uses constant extra space.

// Example 1:

// Input: nums = [1,2,0]
// Output: 3
// Explanation: The numbers in the range [1,2] are all in the array.
// Example 2:

// Input: nums = [3,4,-1,1]
// Output: 2
// Explanation: 1 is in the array but 2 is missing.
// Example 3:

// Input: nums = [7,8,9,11,12]
// Output: 1
// Explanation: The smallest positive integer 1 is missing.

class Solution {
    private:
    void removeDuplicates(vector<int>& nums){
         for(int i=nums.size()-1;i>=1;i--){
            if(nums[i]==nums[i-1]){
                nums.erase(nums.begin()+i);
               nums.size()-1;
            }
        }
    }
public:
    int firstMissingPositive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        removeDuplicates(nums);
        int store=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0){
                store= i;
                break;
            }
        }
        int j=1;
         for(int i=store;i<nums.size();i++){
            if(nums[i]!=j){
              break;
            }
             j++;
        }
        return j;
    }
};
